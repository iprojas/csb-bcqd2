{"version":3,"sources":["index.js"],"names":["cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","useState","Set","gone","useSprings","length","props","set","bind","useGesture","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","open","clear","map","div","style","transform","interpolate","backgroundImage","render","document","getElementById"],"mappings":"2KAMMA,EAAQ,CACZ,6EACA,4EACA,iFAIIC,EAAK,SAACC,GAAD,MAAQ,CAAEC,EAAG,EAAGC,GAAQ,EAALF,EAAQG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAChFQ,EAAO,SAACR,GAAD,oBAAUC,EAAG,EAAGC,GAAQ,EAALF,EAAQI,IAAK,EAAGD,MAAO,KAA1C,KAAmD,MAE1DM,EAAQ,SAACC,EAAGC,GAAJ,2DAAwDD,EAAI,GAA5D,wBAA8EA,EAA9E,sBAA6FC,EAA7F,MAMd,SAASC,IACP,MAAeC,oBAAS,kBAAM,IAAIC,OAA3BC,EAAP,oBACA,EAAqBC,YAAWlB,EAAMmB,QAAQ,SAACjB,GAAD,mBAAC,eAAYD,EAAGC,IAAhB,IAAoBQ,KAAMA,EAAKR,QAA7E,mBAAOkB,EAAP,KAAcC,EAAd,KAEMC,EAAOC,aAAW,YAAsF,IAA5EC,EAA2E,cAAlFC,KAAkF,MAAnEC,EAAmE,EAAnEA,KAAcC,EAAqD,cAA7DC,MAA6D,MAAtBC,GAAsB,EAA5CC,SAA4C,cAAlCC,UAAkC,OAAfC,EAAe,EAAfA,SAEtFC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELf,EAAKiB,IAAIV,GAC/BH,GAAI,SAACnB,GACH,GAAIsB,IAAUtB,EAAd,CACA,IAAMiC,EAASlB,EAAKmB,IAAIZ,GAIxB,MAAO,CAAErB,EAHCgC,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAGzDrB,IAFAqB,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAE1C3B,MADHqB,EAAO,IAAM,EACHjB,WAAO8B,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,UAEpGT,GAAQT,EAAK0B,OAAS3C,EAAMmB,QAAQyB,YAAW,uBAnBtDP,OAAOQ,KAAK,gGAAiG,UAmBnC5B,EAAK6B,SAAWzB,GAAI,SAACnB,GAAD,OAAOD,EAAGC,QAAK,SAG7G,OAAOkB,EAAM2B,KAAI,WAAuB7C,GAAvB,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGE,EAAT,EAASA,IAAKD,EAAd,EAAcA,MAAd,OACf,cAAC,IAAS2C,IAAV,CAAsBC,MAAO,CAAEC,UAAWC,YAAY,CAAChD,EAAGC,IAAI,SAACD,EAAGC,GAAJ,4BAAyBD,EAAzB,cAAgCC,EAAhC,aAA9D,SAEE,cAAC,IAAS4C,IAAV,2BAAkB1B,EAAKpB,IAAvB,IAA2B+C,MAAO,CAAEC,UAAWC,YAAY,CAAC7C,EAAKD,GAAQM,GAAQyC,gBAAgB,OAAD,OAASpD,EAAME,GAAf,UAF/EA,MAOvBmD,iBAAO,cAACvC,EAAD,IAAUwC,SAASC,eAAe,U","file":"static/js/main.9f58d6ca.chunk.js","sourcesContent":["import { render } from 'react-dom'\nimport React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-with-gesture'\nimport './styles.css'\n\nconst cards = [\n  'https://upload.wikimedia.org/wikipedia/commons/f/ff/RWS_Tarot_21_World.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/d/db/RWS_Tarot_17_Star.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/d/de/RWS_Tarot_01_Magician.jpg',\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = (i) => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = (i) => ({ x: 0, y: i * -4, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nfunction Whastapp() {\n  window.open('https://api.whatsapp.com/send?phone=56994991536&text=Quiz%C3%A1s%20deber%C3%ADamos%20hablar..', '_self')\n}\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, (i) => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.1 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set((i) => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 70, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => Whastapp() || gone.clear() || set((i) => to(i)), 1500)\n  })\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n    </animated.div>\n  ))\n}\n\nrender(<Deck />, document.getElementById('root'))\n"],"sourceRoot":""}